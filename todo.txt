SCRIPT
--------
- Entregar y analizar el problema.
- Responder la pregunta del problema de diseño.
- Identificar el patron de diseño que resuelve su problema.


General
--------
Slides de patrones de diseño (definición, beneficios(comunicación))
Más patrones de diseño para que busquen.
Hoja de principios de diseño.

Strategy
--------
- Diferencia con State

Observer Pattern c#
---------------------
-Weather Station? Para mostrar y ver los resultados
-Obsevable c#
http://www.remondo.net/observer-pattern-example-csharp-iobservable/
http://www.codeproject.com/Articles/88278/Observer-in-NET-4-0-with-IObserver-T
Cual es el problema de observable 108 (es el orden)
- Eliminar el D del documento de Problemas de 1er diseño

DECORATOR
---------
- Ejercicio Before
- Decorator c#
http://stackoverflow.com/questions/6366385/decorator-pattern-for-io
- No tiene para identificar problemas

STRATEGY
-------
- Diferencia con Strategy

Ejercicios
---------
Despues de aplicar el patron:Por que los design patterns se encuentra en este código
Al finalizar el problema: Qué patrones se violan en este diseño.
Extras de código al problema
- Observer: Pantalla HeatIndex, Decorator using Framework
- Decorator: Sizes, Extender el Decorator de la Framework
Buscar una implementación dentro de la framework que use el patrón
Que problemas trae el patrón
- Decorator: difícil de enteder inmediamente, crear el objecto es un poco difícil.
- Strategy: incremento en el número de clases
Qué patrones se combina
- Decorator: Builder,Factory
Que categoría pertenece (global o por grupo) 627
Ejercicios varios:
- Diferencia entre State, Strategy y Template